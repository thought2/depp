// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showChar"] = showChar;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Eq1 = function (eq1) {
      this.eq1 = eq1;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);   
  var eq1 = function (dict) {
      return dict.eq1;
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  var eq1Array = new Eq1(function (dictEq) {
      return eq(eqArray(dictEq));
  });
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["Eq1"] = Eq1;
  exports["eq1"] = eq1;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqArray"] = eqArray;
  exports["eq1Array"] = eq1Array;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var lessThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return false;
              };
              return true;
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["lessThanOrEq"] = lessThanOrEq;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
  exports["error"] = $foreign.error;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };              
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadZero = function (Alternative1, Monad0) {
      this.Alternative1 = Alternative1;
      this.Monad0 = Monad0;
  }; 
  var guard = function (dictMonadZero) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
          };
          throw new Error("Failed pattern match at Control.MonadZero line 54, column 1 - line 54, column 52: " + [ v.constructor.name ]);
      };
  };
  exports["MonadZero"] = MonadZero;
  exports["guard"] = guard;
})(PS["Control.MonadZero"] = PS["Control.MonadZero"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 270, column 1 - line 270, column 46: " + [ v.constructor.name ]);
          })());
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 68, column 1 - line 68, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadZeroMaybe"] = monadZeroMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap(dictNewtype);
      };
  };
  var over2 = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($60) {
                      return function ($61) {
                          return wrap(dictNewtype1)(Data_Function.on(f)(unwrap(dictNewtype))($60)($61));
                      };
                  };
              };
          };
      };
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["un"] = un;
  exports["alaF"] = alaF;
  exports["over2"] = over2;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($199) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($199));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($200) {
                  return !elem(dictFoldable)(dictEq)(x)($200);
              };
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["fold"] = fold;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];        
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var note = function (a) {
      return Data_Maybe.maybe(new Left(a))(Right.create);
  };
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 36, column 1 - line 36, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 229, column 1 - line 229, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 43, column 1 - line 43, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 79, column 1 - line 79, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["note"] = note;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var $$try = function (action) {
      return $foreign.catchException(function ($0) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Either.Left.create($0));
      })(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)(action));
  };
  exports["try"] = $$try;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 96, column 3 - line 96, column 25: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($53) {
          return go(f($53));
      };
  }; 
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Done(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                  return new Loop(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                  return new Done(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 112, column 7 - line 112, column 33: " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var bifunctorStep = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Loop) {
                  return new Loop(v(v2.value0));
              };
              if (v2 instanceof Done) {
                  return new Done(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 32, column 1 - line 32, column 41: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRec"] = tailRec;
  exports["tailRecM"] = tailRecM;
  exports["bifunctorStep"] = bifunctorStep;
  exports["monadRecEither"] = monadRecEither;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };
  var newtypeExceptT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ExceptT);
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var except = function (dictApplicative) {
      return function ($96) {
          return ExceptT(Control_Applicative.pure(dictApplicative)($96));
      };
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["except"] = except;
  exports["newtypeExceptT"] = newtypeExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
    "use strict";

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.singleton = function (c) {
    return c;
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports["_indexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.replaceAll = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2);
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  var takeRight = function (i) {
      return function (s) {
          return $foreign.drop($foreign.length(s) - i | 0)(s);
      };
  };
  var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["charAt"] = charAt;
  exports["indexOf'"] = indexOf$prime;
  exports["takeRight"] = takeRight;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["length"] = $foreign.length;
  exports["singleton"] = $foreign.singleton;
  exports["replaceAll"] = $foreign.replaceAll;
  exports["take"] = $foreign.take;
  exports["split"] = $foreign.split;
  exports["joinWith"] = $foreign.joinWith;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
    "use strict";
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];        

  //------------------------------------------------------------------------------
  // Util
  //------------------------------------------------------------------------------
  var withTicks = function (inner) {
      return "\"" + (inner + "\"");
  };
  var sepByComma = Data_String.joinWith(", ");
  var copy = {
      errors: {
          readTextFile: function (path) {
              return "Cannot read text file " + (withTicks(path) + ".");
          },
          envLookup: function (env) {
              return "Cannot find environment variable " + (withTicks(env) + ".");
          },
          parseLang: function (lang) {
              return function (langs) {
                  return lang + (" is not one of the supported languages: " + (sepByComma(langs) + "."));
              };
          },
          parseDirPath: function (path) {
              return withTicks(path) + " is not a valid directory path. You have to add a slash to the end.";
          },
          parseFilePath: function (path) {
              return withTicks(path) + " is not a valid file path.";
          },
          parseModule: function (path) {
              return "Something is wrong with the module " + (withTicks(path) + ".");
          },
          maxDepthLevel: function (n) {
              return "The maximum depth level of " + (n + " was exceeded.");
          },
          unknown: "An unknown error occured."
      },
      env: {
          lang: "The programming language you use in the project.",
          dir: "Your project's source directory. Relative or absolute path.",
          main: "The entry point of the dependency graph. Relative path to $DIR."
      },
      help: {
          title: "Provide the following environment variables:\x0a" + "LANGUAGE, DIR, MAIN"
      }
  };
  exports["copy"] = copy;
  exports["withTicks"] = withTicks;
  exports["sepByComma"] = sepByComma;
})(PS["Copy"] = PS["Copy"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                    

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable($foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  var eq1NonEmpty = function (dictEq1) {
      return new Data_Eq.Eq1(function (dictEq) {
          return function (v) {
              return function (v1) {
                  return Data_Eq.eq(dictEq)(v.value0)(v1.value0) && Data_Eq.eq1(dictEq1)(dictEq)(v.value1)(v1.value1);
              };
          };
      });
  };
  var eqNonEmpty = function (dictEq1) {
      return function (dictEq) {
          return new Data_Eq.Eq(Data_Eq.eq1(eq1NonEmpty(dictEq1))(dictEq));
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["eqNonEmpty"] = eqNonEmpty;
  exports["eq1NonEmpty"] = eq1NonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var singleton = function (a) {
      return [ a ];
  };
  var nubBy = function (eq) {
      return function (xs) {
          var v = uncons(xs);
          if (v instanceof Data_Maybe.Just) {
              return $foreign.cons(v.value0.head)(nubBy(eq)($foreign.filter(function (y) {
                  return !eq(v.value0.head)(y);
              })(v.value0.tail)));
          };
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          throw new Error("Failed pattern match at Data.Array line 888, column 3 - line 890, column 18: " + [ v.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Data_Eq.eq(dictEq));
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($94) {
          return Data_Maybe.maybe([  ])(singleton)(f($94));
      });
  };
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["range"] = $foreign.range;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Char"];
  exports["toCharCode"] = $foreign.toCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var succ = function (dict) {
      return dict.succ;
  };
  var pred = function (dict) {
      return dict.pred;
  }; 
  var enumFromTo = function (dictEnum) {
      return function (dictUnfoldable) {
          return function (from) {
              return function (to) {
                  var go = function (mx) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(mx)(function (v) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_Ord.lessThanOrEq(dictEnum.Ord0())(v)(to)))(function () {
                              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new Data_Tuple.Tuple(v, succ(dictEnum)(v)));
                          });
                      });
                  };
                  return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_Maybe.Just(from));
              };
          };
      };
  };
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["enumFromTo"] = enumFromTo;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Maybe = PS["Data.Maybe"];
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Constructor = function (x) {
      return x;
  };
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["to"] = to;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Product"] = Product;
  exports["Constructor"] = Constructor;
})(PS["Data.Generic.Rep"] = PS["Data.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];        
  var GenericBottom = function (genericBottom$prime) {
      this["genericBottom'"] = genericBottom$prime;
  };
  var GenericTop = function (genericTop$prime) {
      this["genericTop'"] = genericTop$prime;
  };
  var genericTopNoArguments = new GenericTop(Data_Generic_Rep.NoArguments.value);
  var genericTop$prime = function (dict) {
      return dict["genericTop'"];
  };
  var genericTopConstructor = function (dictGenericTop) {
      return new GenericTop(genericTop$prime(dictGenericTop));
  };
  var genericTop = function (dictGeneric) {
      return function (dictGenericTop) {
          return Data_Generic_Rep.to(dictGeneric)(genericTop$prime(dictGenericTop));
      };
  };
  var genericBottomNoArguments = new GenericBottom(Data_Generic_Rep.NoArguments.value);
  var genericBottom$prime = function (dict) {
      return dict["genericBottom'"];
  };
  var genericBottomConstructor = function (dictGenericBottom) {
      return new GenericBottom(genericBottom$prime(dictGenericBottom));
  };
  var genericBottom = function (dictGeneric) {
      return function (dictGenericBottom) {
          return Data_Generic_Rep.to(dictGeneric)(genericBottom$prime(dictGenericBottom));
      };
  };
  exports["GenericBottom"] = GenericBottom;
  exports["genericBottom"] = genericBottom;
  exports["GenericTop"] = GenericTop;
  exports["genericTop"] = genericTop;
  exports["genericBottomNoArguments"] = genericBottomNoArguments;
  exports["genericBottomConstructor"] = genericBottomConstructor;
  exports["genericTopNoArguments"] = genericTopNoArguments;
  exports["genericTopConstructor"] = genericTopConstructor;
})(PS["Data.Generic.Rep.Bounded"] = PS["Data.Generic.Rep.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Bounded = PS["Data.Generic.Rep.Bounded"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];        
  var GenericEnum = function (genericPred$prime, genericSucc$prime) {
      this["genericPred'"] = genericPred$prime;
      this["genericSucc'"] = genericSucc$prime;
  };
  var genericSucc$prime = function (dict) {
      return dict["genericSucc'"];
  };
  var genericSucc = function (dictGeneric) {
      return function (dictGenericEnum) {
          return function ($91) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric))(genericSucc$prime(dictGenericEnum)(Data_Generic_Rep.from(dictGeneric)($91)));
          };
      };
  };
  var genericPred$prime = function (dict) {
      return dict["genericPred'"];
  };
  var genericPred = function (dictGeneric) {
      return function (dictGenericEnum) {
          return function ($92) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric))(genericPred$prime(dictGenericEnum)(Data_Generic_Rep.from(dictGeneric)($92)));
          };
      };
  };
  var genericEnumNoArguments = new GenericEnum(function (v) {
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return Data_Maybe.Nothing.value;
  });
  var genericEnumConstructor = function (dictGenericEnum) {
      return new GenericEnum(function (v) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericPred$prime(dictGenericEnum)(v));
      }, function (v) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericSucc$prime(dictGenericEnum)(v));
      });
  };
  exports["GenericEnum"] = GenericEnum;
  exports["genericPred"] = genericPred;
  exports["genericSucc"] = genericSucc;
  exports["genericEnumNoArguments"] = genericEnumNoArguments;
  exports["genericEnumConstructor"] = genericEnumConstructor;
})(PS["Data.Generic.Rep.Enum"] = PS["Data.Generic.Rep.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Prelude = PS["Prelude"];        
  var GenericEq = function (genericEq$prime) {
      this["genericEq'"] = genericEq$prime;
  }; 
  var genericEqNoArguments = new GenericEq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var genericEqArgument = function (dictEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var genericEq$prime = function (dict) {
      return dict["genericEq'"];
  };
  var genericEqConstructor = function (dictGenericEq) {
      return new GenericEq(function (v) {
          return function (v1) {
              return genericEq$prime(dictGenericEq)(v)(v1);
          };
      });
  };
  var genericEqProduct = function (dictGenericEq) {
      return function (dictGenericEq1) {
          return new GenericEq(function (v) {
              return function (v1) {
                  return genericEq$prime(dictGenericEq)(v.value0)(v1.value0) && genericEq$prime(dictGenericEq1)(v.value1)(v1.value1);
              };
          });
      };
  };
  var genericEq = function (dictGeneric) {
      return function (dictGenericEq) {
          return function (x) {
              return function (y) {
                  return genericEq$prime(dictGenericEq)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y));
              };
          };
      };
  };
  exports["GenericEq"] = GenericEq;
  exports["genericEq"] = genericEq;
  exports["genericEqNoArguments"] = genericEqNoArguments;
  exports["genericEqProduct"] = genericEqProduct;
  exports["genericEqConstructor"] = genericEqConstructor;
  exports["genericEqArgument"] = genericEqArgument;
})(PS["Data.Generic.Rep.Eq"] = PS["Data.Generic.Rep.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Prelude = PS["Prelude"];        
  var GenericOrd = function (genericCompare$prime) {
      this["genericCompare'"] = genericCompare$prime;
  }; 
  var genericOrdNoArguments = new GenericOrd(function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var genericCompare$prime = function (dict) {
      return dict["genericCompare'"];
  };
  var genericOrdConstructor = function (dictGenericOrd) {
      return new GenericOrd(function (v) {
          return function (v1) {
              return genericCompare$prime(dictGenericOrd)(v)(v1);
          };
      });
  };
  var genericCompare = function (dictGeneric) {
      return function (dictGenericOrd) {
          return function (x) {
              return function (y) {
                  return genericCompare$prime(dictGenericOrd)(Data_Generic_Rep.from(dictGeneric)(x))(Data_Generic_Rep.from(dictGeneric)(y));
              };
          };
      };
  };
  exports["GenericOrd"] = GenericOrd;
  exports["genericCompare"] = genericCompare;
  exports["genericOrdNoArguments"] = genericOrdNoArguments;
  exports["genericOrdConstructor"] = genericOrdConstructor;
})(PS["Data.Generic.Rep.Ord"] = PS["Data.Generic.Rep.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($158) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($158));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($159) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($159));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 120, column 1 - line 120, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 3 - line 368, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var manyRec = function (dictMonadRec) {
      return function (dictAlternative) {
          return function (p) {
              var go = function (acc) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function (v) {
                      return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function (v1) {
                          return new Data_List_Types.Cons(v1, acc);
                      })(function (v1) {
                          return reverse(acc);
                      })(v));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
      };
  };
  exports["manyRec"] = manyRec;
  exports["reverse"] = reverse;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
    "use strict";

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  exports["lookup"] = lookup;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var NonEmptyString = function (x) {
      return x;
  };
  var toString = function (v) {
      return v;
  };
  var singleton = function ($74) {
      return NonEmptyString(Data_String.singleton($74));
  }; 
  var semigroupNonEmptyString = Data_Semigroup.semigroupString;
  var replaceAll = function (pat) {
      return function (v) {
          return function (v1) {
              return Data_String.replaceAll(pat)(v)(v1);
          };
      };
  };
  var fromString = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(v);
  };
  var unsafeFromString = function (dictPartial) {
      return function ($83) {
          return Data_Maybe.fromJust(dictPartial)(fromString($83));
      };
  };
  exports["fromString"] = fromString;
  exports["unsafeFromString"] = unsafeFromString;
  exports["singleton"] = singleton;
  exports["toString"] = toString;
  exports["replaceAll"] = replaceAll;
  exports["semigroupNonEmptyString"] = semigroupNonEmptyString;
})(PS["Data.String.NonEmpty"] = PS["Data.String.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.Encoding"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding line 19, column 1 - line 19, column 39: " + [ v.constructor.name ]);
  });
  exports["ASCII"] = ASCII;
  exports["UTF8"] = UTF8;
  exports["UTF16LE"] = UTF16LE;
  exports["UCS2"] = UCS2;
  exports["Base64"] = Base64;
  exports["Latin1"] = Latin1;
  exports["Binary"] = Binary;
  exports["Hex"] = Hex;
  exports["showEncoding"] = showEncoding;
})(PS["Node.Encoding"] = PS["Node.Encoding"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.FS.Stats"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_JSDate = PS["Data.JSDate"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Stats = (function () {
      function Stats(value0) {
          this.value0 = value0;
      };
      Stats.create = function (value0) {
          return new Stats(value0);
      };
      return Stats;
  })();
  exports["Stats"] = Stats;
})(PS["Node.FS.Stats"] = PS["Node.FS.Stats"] || {});
(function(exports) {
    "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.FS.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var mkEff = Unsafe_Coerce.unsafeCoerce;
  exports["mkEff"] = mkEff;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS = PS["Node.FS"];
  var Node_FS_Internal = PS["Node.FS.Internal"];
  var Node_FS_Perms = PS["Node.FS.Perms"];
  var Node_FS_Stats = PS["Node.FS.Stats"];
  var Node_Path = PS["Node.Path"];
  var Prelude = PS["Prelude"];        
  var fs = Node_FS_Internal.unsafeRequireFS;
  var readTextFile = function (encoding) {
      return function (file) {
          return Node_FS_Internal.mkEff(function (v) {
              return fs.readFileSync(file, {
                  encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
              });
          });
      };
  };
  var stat = function (file) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Node_FS_Stats.Stats.create)(Node_FS_Internal.mkEff(function (v) {
          return fs.statSync(file);
      }));
  };
  exports["stat"] = stat;
  exports["readTextFile"] = readTextFile;
})(PS["Node.FS.Sync"] = PS["Node.FS.Sync"] || {});
(function(exports) {
    "use strict";

  exports.process = process;

  exports.exit = function (code) {
    return function () {
      process.exit(code);
    };
  };
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.Process"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Posix = PS["Data.Posix"];
  var Data_Posix_Signal = PS["Data.Posix.Signal"];
  var Data_StrMap = PS["Data.StrMap"];
  var Node_Platform = PS["Node.Platform"];
  var Node_Stream = PS["Node.Stream"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var mkEff = Unsafe_Coerce.unsafeCoerce;
  var getEnv = mkEff(function (v) {
      return $foreign.process.env;
  });
  var lookupEnv = function (k) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_StrMap.lookup(k))(getEnv);
  }; 
  var cwd = $foreign.process.cwd;
  var argv = mkEff(function (v) {
      return $foreign.process.argv;
  });
  exports["argv"] = argv;
  exports["cwd"] = cwd;
  exports["getEnv"] = getEnv;
  exports["lookupEnv"] = lookupEnv;
  exports["exit"] = $foreign.exit;
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];        
  var IsRelOrAbs = function (onRelOrAbs) {
      this.onRelOrAbs = onRelOrAbs;
  };
  var IsDirOrFile = function (onDirOrFile) {
      this.onDirOrFile = onDirOrFile;
  };
  var relIsRelOrAbs = new IsRelOrAbs(function (f) {
      return function (v) {
          return f(Control_Category.id(Control_Category.categoryFn));
      };
  });
  var onRelOrAbs = function (dict) {
      return dict.onRelOrAbs;
  };
  var onDirOrFile = function (dict) {
      return dict.onDirOrFile;
  };
  var isDirOrFileFile = new IsDirOrFile(function (v) {
      return function (f) {
          return f(Control_Category.id(Control_Category.categoryFn));
      };
  });
  var isDirOrFileDir = new IsDirOrFile(function (f) {
      return function (v) {
          return f(Control_Category.id(Control_Category.categoryFn));
      };
  });
  var foldRelOrAbs = function (dictIsRelOrAbs) {
      return function (f) {
          return function (g) {
              return onRelOrAbs(dictIsRelOrAbs)(Data_Function["const"](f))(Data_Function["const"](g));
          };
      };
  };
  var foldDirOrFile = function (dictIsDirOrFile) {
      return function (f) {
          return function (g) {
              return onDirOrFile(dictIsDirOrFile)(Data_Function["const"](f))(Data_Function["const"](g));
          };
      };
  };
  var absIsRelOrAbs = new IsRelOrAbs(function (v) {
      return function (f) {
          return f(Control_Category.id(Control_Category.categoryFn));
      };
  });
  exports["onDirOrFile"] = onDirOrFile;
  exports["onRelOrAbs"] = onRelOrAbs;
  exports["IsRelOrAbs"] = IsRelOrAbs;
  exports["foldRelOrAbs"] = foldRelOrAbs;
  exports["IsDirOrFile"] = IsDirOrFile;
  exports["foldDirOrFile"] = foldDirOrFile;
  exports["relIsRelOrAbs"] = relIsRelOrAbs;
  exports["absIsRelOrAbs"] = absIsRelOrAbs;
  exports["isDirOrFileDir"] = isDirOrFileDir;
  exports["isDirOrFileFile"] = isDirOrFileFile;
})(PS["Pathy.Phantom"] = PS["Pathy.Phantom"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_NonEmpty = PS["Data.String.NonEmpty"];
  var Data_Symbol = PS["Data.Symbol"];
  var Pathy_Phantom = PS["Pathy.Phantom"];
  var Prelude = PS["Prelude"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Name = function (x) {
      return x;
  };                                                   
  var newtypeName = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Name);
  exports["Name"] = Name;
  exports["newtypeName"] = newtypeName;
})(PS["Pathy.Name"] = PS["Pathy.Name"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String_NonEmpty = PS["Data.String.NonEmpty"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Pathy_Name = PS["Pathy.Name"];
  var Pathy_Phantom = PS["Pathy.Phantom"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Init = (function () {
      function Init() {

      };
      Init.value = new Init();
      return Init;
  })();
  var ParentOf = (function () {
      function ParentOf(value0) {
          this.value0 = value0;
      };
      ParentOf.create = function (value0) {
          return new ParentOf(value0);
      };
      return ParentOf;
  })();
  var In = (function () {
      function In(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      In.create = function (value0) {
          return function (value1) {
              return new In(value0, value1);
          };
      };
      return In;
  })();
  var rootDir = Init.value;
  var foldPath = function (r) {
      return function (f) {
          return function (g) {
              return function (v) {
                  if (v instanceof Init) {
                      return r;
                  };
                  if (v instanceof ParentOf) {
                      return f(v.value0);
                  };
                  if (v instanceof In) {
                      return g(v.value0)(v.value1);
                  };
                  throw new Error("Failed pattern match at Pathy.Path line 199, column 18 - line 202, column 18: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var name = function (dictIsRelOrAbs) {
      return function (dictIsDirOrFile) {
          return foldPath(Data_Maybe.Nothing.value)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Just.create));
      };
  };
  var peel = foldPath(Data_Maybe.Nothing.value)(Data_Function["const"](Data_Maybe.Nothing.value))(function (p) {
      return function (n) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(p, n));
      };
  });
  var parentOf = function (dictIsRelOrAbs) {
      return Pathy_Phantom.onRelOrAbs(dictIsRelOrAbs)(function (coe) {
          return function (p) {
              return Data_Maybe.maybe(new ParentOf(p))(function ($103) {
                  return coe(Data_Tuple.fst($103));
              })(peel(p));
          };
      })(function (coe) {
          return function ($104) {
              return coe(Data_Maybe.maybe(Init.value)(Data_Tuple.fst)(peel($104)));
          };
      });
  };
  var extendPath = function (p) {
      return In.create(p);
  };
  var currentDir = Init.value;
  var appendPath = function (dictIsRelOrAbs) {
      return function (v) {
          return function (v1) {
              if (v instanceof Init && v1 instanceof Init) {
                  return Init.value;
              };
              if (v instanceof ParentOf && v1 instanceof Init) {
                  return new ParentOf(appendPath(Pathy_Phantom.relIsRelOrAbs)(v.value0)(Init.value));
              };
              if (v instanceof In && v1 instanceof Init) {
                  return new In(appendPath(dictIsRelOrAbs)(v.value0)(Init.value), v.value1);
              };
              if (v1 instanceof ParentOf) {
                  return parentOf(dictIsRelOrAbs)(appendPath(dictIsRelOrAbs)(v)(v1.value0));
              };
              if (v1 instanceof In) {
                  return new In(appendPath(dictIsRelOrAbs)(v)(v1.value0), v1.value1);
              };
              throw new Error("Failed pattern match at Pathy.Path line 162, column 14 - line 167, column 34: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["rootDir"] = rootDir;
  exports["currentDir"] = currentDir;
  exports["parentOf"] = parentOf;
  exports["extendPath"] = extendPath;
  exports["appendPath"] = appendPath;
  exports["foldPath"] = foldPath;
  exports["peel"] = peel;
  exports["name"] = name;
})(PS["Pathy.Path"] = PS["Pathy.Path"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_String_NonEmpty = PS["Data.String.NonEmpty"];
  var Pathy_Name = PS["Pathy.Name"];
  var Pathy_Path = PS["Pathy.Path"];
  var Pathy_Phantom = PS["Pathy.Phantom"];
  var Prelude = PS["Prelude"];
  var parsePath = function (v) {
      return v;
  };
  var parseRelDir = function (p) {
      return parsePath(p)(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Nothing.value);
  };
  var parseRelFile = function (p) {
      return parsePath(p)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Nothing.value);
  };
  var parseAbsDir = function (p) {
      return parsePath(p)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Nothing.value);
  };
  var buildPath = function (dictIsRelOrAbs) {
      return function (z) {
          return function (init) {
              return function (k) {
                  return function (segs) {
                      var go = function (v) {
                          if (v instanceof Data_List_Types.Nil) {
                              return init;
                          };
                          if (v instanceof Data_List_Types.Cons) {
                              if (Data_String_NonEmpty.toString(v.value0) === "..") {
                                  return Pathy_Path.parentOf(dictIsRelOrAbs)(go(v.value1));
                              };
                              if (Data_String_NonEmpty.toString(v.value0) === ".") {
                                  return go(v.value1);
                              };
                              if (Data_Boolean.otherwise) {
                                  return Pathy_Path.extendPath(go(v.value1))(v.value0);
                              };
                          };
                          throw new Error("Failed pattern match at Pathy.Parser line 77, column 10 - line 82, column 57: " + [ v.constructor.name ]);
                      };
                      if (segs instanceof Data_List_Types.Nil) {
                          return z;
                      };
                      if (segs instanceof Data_List_Types.Cons) {
                          if (Data_String_NonEmpty.toString(segs.value0) === "..") {
                              return k(new Data_Either.Left(Pathy_Path.parentOf(dictIsRelOrAbs)(go(segs.value1))));
                          };
                          if (Data_String_NonEmpty.toString(segs.value0) === ".") {
                              return k(new Data_Either.Left(go(segs.value1)));
                          };
                          if (Data_Boolean.otherwise) {
                              return k(new Data_Either.Right(Pathy_Path.extendPath(go(segs.value1))(segs.value0)));
                          };
                      };
                      throw new Error("Failed pattern match at Pathy.Parser line 69, column 3 - line 74, column 67: " + [ segs.constructor.name ]);
                  };
              };
          };
      };
  };
  var asReversedList = Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(Data_List_Types.Cons.create))(Data_List_Types.Nil.value);
  var posixParser = function (relDir) {
      return function (absDir) {
          return function (relFile) {
              return function (absFile) {
                  return function (z) {
                      return function (v) {
                          if (v === "") {
                              return z;
                          };
                          if (v === "/") {
                              return absDir(Pathy_Path.rootDir);
                          };
                          var segs = asReversedList(Data_Array.mapMaybe(Data_String_NonEmpty.fromString)(Data_String.split("/")(v)));
                          var isFile = Data_String.takeRight(1)(v) !== "/";
                          var isAbs = Data_String.take(1)(v) === "/";
                          if (isAbs && isFile) {
                              return buildPath(Pathy_Phantom.absIsRelOrAbs)(z)(Pathy_Path.rootDir)(Data_Either.either(Data_Function["const"](z))(absFile))(segs);
                          };
                          if (isAbs && !isFile) {
                              return buildPath(Pathy_Phantom.absIsRelOrAbs)(z)(Pathy_Path.rootDir)(Data_Either.either(absDir)(absDir))(segs);
                          };
                          if (!isAbs && isFile) {
                              return buildPath(Pathy_Phantom.relIsRelOrAbs)(z)(Pathy_Path.currentDir)(Data_Either.either(Data_Function["const"](z))(relFile))(segs);
                          };
                          if (!isAbs && !isFile) {
                              return buildPath(Pathy_Phantom.relIsRelOrAbs)(z)(Pathy_Path.currentDir)(Data_Either.either(relDir)(relDir))(segs);
                          };
                          throw new Error("Failed pattern match at Pathy.Parser line 49, column 9 - line 53, column 77: " + [ isAbs.constructor.name, isFile.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  exports["posixParser"] = posixParser;
  exports["parsePath"] = parsePath;
  exports["parseRelFile"] = parseRelFile;
  exports["parseRelDir"] = parseRelDir;
  exports["parseAbsDir"] = parseAbsDir;
})(PS["Pathy.Parser"] = PS["Pathy.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Pathy_Path = PS["Pathy.Path"];
  var Pathy_Phantom = PS["Pathy.Phantom"];
  var Prelude = PS["Prelude"];        
  var SandboxedPath = (function () {
      function SandboxedPath(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SandboxedPath.create = function (value0) {
          return function (value1) {
              return new SandboxedPath(value0, value1);
          };
      };
      return SandboxedPath;
  })();
  var unsandbox = function (v) {
      return v.value1;
  };
  var sandboxAny = function (p) {
      return new SandboxedPath(Pathy_Path.rootDir, p);
  };
  exports["sandboxAny"] = sandboxAny;
  exports["unsandbox"] = unsandbox;
})(PS["Pathy.Sandboxed"] = PS["Pathy.Sandboxed"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_String_NonEmpty = PS["Data.String.NonEmpty"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Pathy_Name = PS["Pathy.Name"];
  var Pathy_Path = PS["Pathy.Path"];
  var Pathy_Phantom = PS["Pathy.Phantom"];
  var Pathy_Sandboxed = PS["Pathy.Sandboxed"];
  var Prelude = PS["Prelude"];        
  var Escaper = function (x) {
      return x;
  };
  var slashEscaper = (function () {
      var dash = Data_String_NonEmpty.singleton("-");
      return Data_String_NonEmpty.replaceAll("/")(dash);
  })();
  var semigroupEscaper = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function ($29) {
              return v(v1($29));
          };
      };
  });
  var newtypeEscaper = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Escaper);
  var printSegment = function (dictNewtype) {
      return function (printer) {
          return function ($30) {
              return Data_String_NonEmpty.toString(Data_Newtype.un(newtypeEscaper)(Escaper)(printer.escaper)(Data_Newtype.unwrap(dictNewtype)($30)));
          };
      };
  };
  var printPathRep = function (dictIsRelOrAbs) {
      return function (dictIsDirOrFile) {
          return function (printer) {
              return function (inputPath) {
                  var isAbs = Pathy_Phantom.foldRelOrAbs(dictIsRelOrAbs)(Data_Function["const"](false))(Data_Function["const"](true))(inputPath);
                  var caseCurrent = (function () {
                      if (isAbs) {
                          return printer.root(Data_Maybe.Nothing.value);
                      };
                      return Data_String_NonEmpty.toString(Data_Semigroup.append(Data_String_NonEmpty.semigroupNonEmptyString)(printer.current)(printer.sep));
                  })();
                  var go = function (dictIsRelOrAbs1) {
                      return function (dictIsDirOrFile1) {
                          return Pathy_Path.foldPath(caseCurrent)(caseParentOf)(caseIn(dictIsRelOrAbs1)(dictIsDirOrFile1));
                      };
                  };
                  var caseParentOf = function (p) {
                      return go(Pathy_Phantom.relIsRelOrAbs)(Pathy_Phantom.isDirOrFileDir)(p) + Data_String_NonEmpty.toString(Data_Semigroup.append(Data_String_NonEmpty.semigroupNonEmptyString)(printer.up)(printer.sep));
                  };
                  var caseIn = function (dictIsRelOrAbs1) {
                      return function (dictIsDirOrFile1) {
                          return function (p) {
                              return function (name) {
                                  return Pathy_Phantom.foldDirOrFile(dictIsDirOrFile1)(function (dirName) {
                                      return Pathy_Path.foldPath((function () {
                                          if (isAbs) {
                                              return printer.root(Data_Maybe.Just.create(Data_Newtype.unwrap(Pathy_Name.newtypeName)(dirName))) + Data_String_NonEmpty.toString(printer.sep);
                                          };
                                          return caseCurrent + (printSegment(Pathy_Name.newtypeName)(printer)(dirName) + Data_String_NonEmpty.toString(printer.sep));
                                      })())(function (p$prime) {
                                          return caseParentOf(p$prime) + (printSegment(Pathy_Name.newtypeName)(printer)(dirName) + Data_String_NonEmpty.toString(printer.sep));
                                      })(function (p$prime) {
                                          return function (n$prime) {
                                              return caseIn(dictIsRelOrAbs1)(Pathy_Phantom.isDirOrFileDir)(p$prime)(n$prime) + (printSegment(Pathy_Name.newtypeName)(printer)(dirName) + Data_String_NonEmpty.toString(printer.sep));
                                          };
                                      })(p);
                                  })(function (fileName) {
                                      return go(dictIsRelOrAbs1)(Pathy_Phantom.isDirOrFileDir)(p) + printSegment(Pathy_Name.newtypeName)(printer)(fileName);
                                  })(name);
                              };
                          };
                      };
                  };
                  return go(dictIsRelOrAbs)(dictIsDirOrFile)(inputPath);
              };
          };
      };
  };
  var unsafePrintPath = function (dictIsRelOrAbs) {
      return function (dictIsDirOrFile) {
          return function (r) {
              return function (sp) {
                  return printPathRep(dictIsRelOrAbs)(dictIsDirOrFile)(r)(Pathy_Sandboxed.unsandbox(sp));
              };
          };
      };
  };
  var dotEscaper = function (s) {
      var v = Data_String_NonEmpty.toString(s);
      if (v === "..") {
          return Data_String_NonEmpty.unsafeFromString()("$dot$dot");
      };
      if (v === ".") {
          return Data_String_NonEmpty.unsafeFromString()("$dot");
      };
      return s;
  };
  var posixEscaper = Data_Semigroup.append(semigroupEscaper)(slashEscaper)(dotEscaper);
  var posixPrinter = {
      root: Data_Maybe.maybe("/")(function (name) {
          return "/" + Data_String_NonEmpty.toString(Data_Newtype.un(newtypeEscaper)(Escaper)(posixEscaper)(name));
      }),
      current: Data_String_NonEmpty.singleton("."),
      up: Data_Semigroup.append(Data_String_NonEmpty.semigroupNonEmptyString)(Data_String_NonEmpty.singleton("."))(Data_String_NonEmpty.singleton(".")),
      sep: Data_String_NonEmpty.singleton("/"),
      escaper: posixEscaper
  };
  exports["posixPrinter"] = posixPrinter;
  exports["unsafePrintPath"] = unsafePrintPath;
  exports["Escaper"] = Escaper;
  exports["slashEscaper"] = slashEscaper;
  exports["dotEscaper"] = dotEscaper;
  exports["posixEscaper"] = posixEscaper;
  exports["newtypeEscaper"] = newtypeEscaper;
  exports["semigroupEscaper"] = semigroupEscaper;
})(PS["Pathy.Printer"] = PS["Pathy.Printer"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var ParseError = (function () {
      function ParseError(value0) {
          this.value0 = value0;
      };
      ParseError.create = function (value0) {
          return new ParseError(value0);
      };
      return ParseError;
  })();
  var unParser = function (v) {
      return v;
  };
  var $$try = function (v) {
      return function (v1) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v2) {
              var $34 = {};
              for (var $35 in v2) {
                  if ({}.hasOwnProperty.call(v2, $35)) {
                      $34[$35] = v2[$35];
                  };
              };
              $34.pos = v1.pos;
              return $34;
          })(v(v1));
      };
  }; 
  var runParser = function (v) {
      return function (s) {
          return Data_Bifunctor.bimap(Data_Either.bifunctorEither)(function (v1) {
              return v1.error;
          })(function (v1) {
              return v1.result;
          })(v({
              str: s,
              pos: 0
          }));
      };
  }; 
  var functorParser = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function ($83) {
              return Data_Functor.map(Data_Either.functorEither)(function (v1) {
                  return {
                      result: f(v1.result),
                      suffix: v1.suffix
                  };
              })(v($83));
          };
      };
  });
  var fail = function (msg) {
      return function (v) {
          return new Data_Either.Left({
              pos: v.pos,
              error: new ParseError(msg)
          });
      };
  }; 
  var applyParser = new Control_Apply.Apply(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(v1(v2.suffix))(function (v3) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          result: v2.result(v3.result),
                          suffix: v3.suffix
                      });
                  });
              });
          };
      };
  });
  var bindParser = new Control_Bind.Bind(function () {
      return applyParser;
  }, function (v) {
      return function (f) {
          return function (s) {
              return Control_Bind.bind(Data_Either.bindEither)(v(s))(function (v1) {
                  return unParser(f(v1.result))(v1.suffix);
              });
          };
      };
  });
  var semigroupParser = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyParser)(Data_Semigroup.append(dictSemigroup)));
  };
  var applicativeParser = new Control_Applicative.Applicative(function () {
      return applyParser;
  }, function (a) {
      return function (s) {
          return new Data_Either.Right({
              result: a,
              suffix: s
          });
      };
  });
  var monadParser = new Control_Monad.Monad(function () {
      return applicativeParser;
  }, function () {
      return bindParser;
  });
  var monadRecParser = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadParser;
  }, function (f) {
      return function (a) {
          var split = function (v) {
              if (v.result instanceof Control_Monad_Rec_Class.Loop) {
                  return new Control_Monad_Rec_Class.Loop({
                      state: v.result.value0,
                      str: v.suffix
                  });
              };
              if (v.result instanceof Control_Monad_Rec_Class.Done) {
                  return new Control_Monad_Rec_Class.Done({
                      result: v.result.value0,
                      suffix: v.suffix
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.StringParser line 88, column 7 - line 88, column 70: " + [ v.constructor.name ]);
          };
          return function (str) {
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEither)(function (st) {
                  return Data_Functor.map(Data_Either.functorEither)(split)(unParser(f(st.state))(st.str));
              })({
                  state: a,
                  str: str
              });
          };
      };
  });
  var altParser = new Control_Alt.Alt(function () {
      return functorParser;
  }, function (v) {
      return function (v1) {
          return function (s) {
              var v2 = v(s);
              if (v2 instanceof Data_Either.Left) {
                  if (s.pos === v2.value0.pos) {
                      return v1(s);
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_Either.Left({
                          error: v2.value0.error,
                          pos: v2.value0.pos
                      });
                  };
              };
              return v2;
          };
      };
  });
  var plusParser = new Control_Plus.Plus(function () {
      return altParser;
  }, fail("No alternative"));
  var alternativeParser = new Control_Alternative.Alternative(function () {
      return applicativeParser;
  }, function () {
      return plusParser;
  });
  exports["ParseError"] = ParseError;
  exports["unParser"] = unParser;
  exports["runParser"] = runParser;
  exports["fail"] = fail;
  exports["try"] = $$try;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["altParser"] = altParser;
  exports["plusParser"] = plusParser;
  exports["alternativeParser"] = alternativeParser;
  exports["bindParser"] = bindParser;
  exports["monadParser"] = monadParser;
  exports["monadRecParser"] = monadRecParser;
  exports["semigroupParser"] = semigroupParser;
})(PS["Text.Parsing.StringParser"] = PS["Text.Parsing.StringParser"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];        
  var withError = function (p) {
      return function (msg) {
          return Control_Alt.alt(Text_Parsing_StringParser.altParser)(p)(Text_Parsing_StringParser.fail(msg));
      };
  };
  var many = Data_List.manyRec(Text_Parsing_StringParser.monadRecParser)(Text_Parsing_StringParser.alternativeParser);
  var sepBy1 = function (p) {
      return function (sep) {
          return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(p)(function (v) {
              return Control_Bind.bind(Text_Parsing_StringParser.bindParser)(many(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(sep)(p)))(function (v1) {
                  return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(new Data_List_Types.Cons(v, v1));
              });
          });
      };
  };
  var between = function (open) {
      return function (close) {
          return function (p) {
              return Control_Apply.applyFirst(Text_Parsing_StringParser.applyParser)(Control_Apply.applySecond(Text_Parsing_StringParser.applyParser)(open)(p))(close);
          };
      };
  };
  exports["many"] = many;
  exports["withError"] = withError;
  exports["between"] = between;
  exports["sepBy1"] = sepBy1;
})(PS["Text.Parsing.StringParser.Combinators"] = PS["Text.Parsing.StringParser.Combinators"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = PS["Text.Parsing.StringParser.Combinators"];        
  var string = function (nt) {
      return function (s) {
          if (Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(Data_String["indexOf'"](nt)(s.pos)(s.str))(new Data_Maybe.Just(s.pos))) {
              return new Data_Either.Right({
                  result: nt,
                  suffix: {
                      str: s.str,
                      pos: s.pos + Data_String.length(nt) | 0
                  }
              });
          };
          return new Data_Either.Left({
              pos: s.pos,
              error: new Text_Parsing_StringParser.ParseError("Expected '" + (nt + "'."))
          });
      };
  };
  var anyChar = function (v) {
      var v1 = Data_String.charAt(v.pos)(v.str);
      if (v1 instanceof Data_Maybe.Just) {
          return new Data_Either.Right({
              result: v1.value0,
              suffix: {
                  str: v.str,
                  pos: v.pos + 1 | 0
              }
          });
      };
      if (v1 instanceof Data_Maybe.Nothing) {
          return new Data_Either.Left({
              pos: v.pos,
              error: new Text_Parsing_StringParser.ParseError("Unexpected EOF")
          });
      };
      throw new Error("Failed pattern match at Text.Parsing.StringParser.String line 45, column 3 - line 47, column 64: " + [ v1.constructor.name ]);
  };
  var anyDigit = Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (v) {
      var $39 = v >= "0" && v <= "9";
      if ($39) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v);
      };
      return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(v) + " is not a digit"));
  }));
  var lowerCaseChar = Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (v) {
      var $41 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(Data_Char.toCharCode(v))(Data_Array.range(97)(122));
      if ($41) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v);
      };
      return Text_Parsing_StringParser.fail("Expected a lower case character but found " + Data_Show.show(Data_Show.showChar)(v));
  }));
  var satisfy = function (f) {
      return Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (v) {
          var $43 = f(v);
          if ($43) {
              return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v);
          };
          return Text_Parsing_StringParser.fail("Character " + (Data_Show.show(Data_Show.showChar)(v) + " did not satisfy predicate"));
      }));
  };
  var $$char = function (c) {
      return Text_Parsing_StringParser_Combinators.withError(satisfy(function (v) {
          return v === c;
      }))("Could not match character " + Data_Show.show(Data_Show.showChar)(c));
  };
  var noneOf = function (dictFoldable) {
      return function ($47) {
          return satisfy(Data_Function.flip(Data_Foldable.notElem(dictFoldable)(Data_Eq.eqChar))($47));
      };
  };
  var whiteSpace = Control_Bind.bind(Text_Parsing_StringParser.bindParser)(Text_Parsing_StringParser_Combinators.many(satisfy(function (c) {
      return c === "\x0a" || (c === "\x0d" || (c === " " || c === "\x09"));
  })))(function (v) {
      return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidString)(Data_String.singleton)(v));
  });                                                                                        
  var upperCaseChar = Text_Parsing_StringParser["try"](Control_Bind.bind(Text_Parsing_StringParser.bindParser)(anyChar)(function (v) {
      var $46 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(Data_Char.toCharCode(v))(Data_Array.range(65)(90));
      if ($46) {
          return Control_Applicative.pure(Text_Parsing_StringParser.applicativeParser)(v);
      };
      return Text_Parsing_StringParser.fail("Expected an upper case character but found " + Data_Show.show(Data_Show.showChar)(v));
  }));
  var anyLetter = Text_Parsing_StringParser_Combinators.withError(Control_Alt.alt(Text_Parsing_StringParser.altParser)(lowerCaseChar)(upperCaseChar))("Expected a letter");
  var alphaNum = Text_Parsing_StringParser_Combinators.withError(Control_Alt.alt(Text_Parsing_StringParser.altParser)(anyLetter)(anyDigit))("Expected a letter or a number");
  exports["anyChar"] = anyChar;
  exports["anyDigit"] = anyDigit;
  exports["string"] = string;
  exports["satisfy"] = satisfy;
  exports["char"] = $$char;
  exports["whiteSpace"] = whiteSpace;
  exports["noneOf"] = noneOf;
  exports["lowerCaseChar"] = lowerCaseChar;
  exports["upperCaseChar"] = upperCaseChar;
  exports["anyLetter"] = anyLetter;
  exports["alphaNum"] = alphaNum;
})(PS["Text.Parsing.StringParser.String"] = PS["Text.Parsing.StringParser.String"] || {});
(function(exports) {
    "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Either = PS["Data.Either"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Bounded = PS["Data.Generic.Rep.Bounded"];
  var Data_Generic_Rep_Enum = PS["Data.Generic.Rep.Enum"];
  var Data_Generic_Rep_Eq = PS["Data.Generic.Rep.Eq"];
  var Data_Generic_Rep_Ord = PS["Data.Generic.Rep.Ord"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Pathy = PS["Pathy"];
  var Prelude = PS["Prelude"];        
  var SourceStrDot = function (x) {
      return x;
  };
  var SourceStr = function (x) {
      return x;
  };
  var ModulePath = function (x) {
      return x;
  };
  var Elm = (function () {
      function Elm() {

      };
      Elm.value = new Elm();
      return Elm;
  })();
  var LangSpec = function (x) {
      return x;
  };
  var ErrReadTextFile = (function () {
      function ErrReadTextFile(value0) {
          this.value0 = value0;
      };
      ErrReadTextFile.create = function (value0) {
          return new ErrReadTextFile(value0);
      };
      return ErrReadTextFile;
  })();
  var ErrEnvLookup = (function () {
      function ErrEnvLookup(value0) {
          this.value0 = value0;
      };
      ErrEnvLookup.create = function (value0) {
          return new ErrEnvLookup(value0);
      };
      return ErrEnvLookup;
  })();
  var ErrParseLang = (function () {
      function ErrParseLang(value0) {
          this.value0 = value0;
      };
      ErrParseLang.create = function (value0) {
          return new ErrParseLang(value0);
      };
      return ErrParseLang;
  })();
  var ErrParseDirPath = (function () {
      function ErrParseDirPath(value0) {
          this.value0 = value0;
      };
      ErrParseDirPath.create = function (value0) {
          return new ErrParseDirPath(value0);
      };
      return ErrParseDirPath;
  })();
  var ErrParseFilePath = (function () {
      function ErrParseFilePath(value0) {
          this.value0 = value0;
      };
      ErrParseFilePath.create = function (value0) {
          return new ErrParseFilePath(value0);
      };
      return ErrParseFilePath;
  })();
  var ErrParseModule = (function () {
      function ErrParseModule(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrParseModule.create = function (value0) {
          return function (value1) {
              return new ErrParseModule(value0, value1);
          };
      };
      return ErrParseModule;
  })();
  var ErrMaxDepthLevel = (function () {
      function ErrMaxDepthLevel(value0) {
          this.value0 = value0;
      };
      ErrMaxDepthLevel.create = function (value0) {
          return new ErrMaxDepthLevel(value0);
      };
      return ErrMaxDepthLevel;
  })();
  var ErrUnknown = (function () {
      function ErrUnknown() {

      };
      ErrUnknown.value = new ErrUnknown();
      return ErrUnknown;
  })();
  var Dependency = (function () {
      function Dependency(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Dependency.create = function (value0) {
          return function (value1) {
              return new Dependency(value0, value1);
          };
      };
      return Dependency;
  })();
  var DependencyGraph = function (x) {
      return x;
  };
  var ResultHelp = (function () {
      function ResultHelp() {

      };
      ResultHelp.value = new ResultHelp();
      return ResultHelp;
  })();
  var ResultMain = (function () {
      function ResultMain(value0) {
          this.value0 = value0;
      };
      ResultMain.create = function (value0) {
          return new ResultMain(value0);
      };
      return ResultMain;
  })();
  var ResultErr = (function () {
      function ResultErr(value0) {
          this.value0 = value0;
      };
      ResultErr.create = function (value0) {
          return new ResultErr(value0);
      };
      return ResultErr;
  })();
  var Config = (function () {
      function Config(value0) {
          this.value0 = value0;
      };
      Config.create = function (value0) {
          return new Config(value0);
      };
      return Config;
  })();

  //------------------------------------------------------------------------------
  // Lifecycle
  //------------------------------------------------------------------------------
  var TaskHelp = (function () {
      function TaskHelp() {

      };
      TaskHelp.value = new TaskHelp();
      return TaskHelp;
  })();

  //------------------------------------------------------------------------------
  // Lifecycle
  //------------------------------------------------------------------------------
  var TaskMain = (function () {
      function TaskMain(value0) {
          this.value0 = value0;
      };
      TaskMain.create = function (value0) {
          return new TaskMain(value0);
      };
      return TaskMain;
  })();
  var newtypeLangSpec = new Data_Newtype.Newtype(function (n) {
      return n;
  }, LangSpec);
  var newtypeDependencyGraph = new Data_Newtype.Newtype(function (n) {
      return n;
  }, DependencyGraph);
  var semigroupDependencyGraph = new Data_Semigroup.Semigroup(Data_Newtype.over2(newtypeDependencyGraph)(newtypeDependencyGraph)(Data_Newtype.wrap(newtypeDependencyGraph))(Data_Semigroup.append(Data_Semigroup.semigroupArray)));
  var monoidDependencyGraph = new Data_Monoid.Monoid(function () {
      return semigroupDependencyGraph;
  }, Data_Newtype.wrap(newtypeDependencyGraph)([  ]));
  var genericModulePath = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var genericLanguage = new Data_Generic_Rep.Generic(function (x) {
      return Data_Generic_Rep.NoArguments.value;
  }, function (x) {
      return Elm.value;
  });   
  var genericDependency = new Data_Generic_Rep.Generic(function (x) {
      return new Data_Generic_Rep.Product(x.value0, x.value1);
  }, function (x) {
      return new Dependency(x.value0, x.value1);
  });
  var eqModulePath = new Data_Eq.Eq(Data_Generic_Rep_Eq.genericEq(genericModulePath)(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqArgument(Data_NonEmpty.eqNonEmpty(Data_Eq.eq1Array)(Data_Eq.eqString)))));
  var eqLanguage = new Data_Eq.Eq(Data_Generic_Rep_Eq.genericEq(genericLanguage)(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqNoArguments)));
  var ordLanguage = new Data_Ord.Ord(function () {
      return eqLanguage;
  }, Data_Generic_Rep_Ord.genericCompare(genericLanguage)(Data_Generic_Rep_Ord.genericOrdConstructor(Data_Generic_Rep_Ord.genericOrdNoArguments)));
  var eqDependency = new Data_Eq.Eq(Data_Generic_Rep_Eq.genericEq(genericDependency)(Data_Generic_Rep_Eq.genericEqConstructor(Data_Generic_Rep_Eq.genericEqProduct(Data_Generic_Rep_Eq.genericEqArgument(eqModulePath))(Data_Generic_Rep_Eq.genericEqArgument(eqModulePath)))));
  var enumLanguage = new Data_Enum.Enum(function () {
      return ordLanguage;
  }, Data_Generic_Rep_Enum.genericPred(genericLanguage)(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments)), Data_Generic_Rep_Enum.genericSucc(genericLanguage)(Data_Generic_Rep_Enum.genericEnumConstructor(Data_Generic_Rep_Enum.genericEnumNoArguments)));
  var boundedLanguage = new Data_Bounded.Bounded(function () {
      return ordLanguage;
  }, Data_Generic_Rep_Bounded.genericBottom(genericLanguage)(Data_Generic_Rep_Bounded.genericBottomConstructor(Data_Generic_Rep_Bounded.genericBottomNoArguments)), Data_Generic_Rep_Bounded.genericTop(genericLanguage)(Data_Generic_Rep_Bounded.genericTopConstructor(Data_Generic_Rep_Bounded.genericTopNoArguments)));
  exports["TaskHelp"] = TaskHelp;
  exports["TaskMain"] = TaskMain;
  exports["ResultHelp"] = ResultHelp;
  exports["ResultMain"] = ResultMain;
  exports["ResultErr"] = ResultErr;
  exports["Config"] = Config;
  exports["DependencyGraph"] = DependencyGraph;
  exports["Dependency"] = Dependency;
  exports["ModulePath"] = ModulePath;
  exports["LangSpec"] = LangSpec;
  exports["SourceStr"] = SourceStr;
  exports["SourceStrDot"] = SourceStrDot;
  exports["ErrReadTextFile"] = ErrReadTextFile;
  exports["ErrEnvLookup"] = ErrEnvLookup;
  exports["ErrParseLang"] = ErrParseLang;
  exports["ErrParseDirPath"] = ErrParseDirPath;
  exports["ErrParseFilePath"] = ErrParseFilePath;
  exports["ErrParseModule"] = ErrParseModule;
  exports["ErrMaxDepthLevel"] = ErrMaxDepthLevel;
  exports["ErrUnknown"] = ErrUnknown;
  exports["Elm"] = Elm;
  exports["newtypeDependencyGraph"] = newtypeDependencyGraph;
  exports["genericDependency"] = genericDependency;
  exports["genericModulePath"] = genericModulePath;
  exports["newtypeLangSpec"] = newtypeLangSpec;
  exports["genericLanguage"] = genericLanguage;
  exports["eqDependency"] = eqDependency;
  exports["eqModulePath"] = eqModulePath;
  exports["eqLanguage"] = eqLanguage;
  exports["enumLanguage"] = enumLanguage;
  exports["ordLanguage"] = ordLanguage;
  exports["boundedLanguage"] = boundedLanguage;
  exports["semigroupDependencyGraph"] = semigroupDependencyGraph;
  exports["monoidDependencyGraph"] = monoidDependencyGraph;
})(PS["Types"] = PS["Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Pathy = PS["Pathy"];
  var Pathy_Parser = PS["Pathy.Parser"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = PS["Text.Parsing.StringParser.Combinators"];
  var Text_Parsing_StringParser_String = PS["Text.Parsing.StringParser.String"];
  var Types = PS["Types"];        
  var sepBy1$prime = function (p) {
      return function (sep) {
          return Data_Functor.mapFlipped(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_Combinators.sepBy1(p)(sep))(function (v) {
              var __unused = function (dictPartial1) {
                  return function ($dollar8) {
                      return $dollar8;
                  };
              };
              return __unused()((function () {
                  if (v instanceof Data_List_Types.Cons) {
                      return new Data_NonEmpty.NonEmpty(v.value0, Data_Array.fromFoldable(Data_List_Types.foldableList)(v.value1));
                  };
                  throw new Error("Failed pattern match at Specs line 85, column 50 - line 85, column 91: " + [ v.constructor.name ]);
              })());
          });
      };
  };
  var parseModuleName = Data_Functor.mapFlipped(Text_Parsing_StringParser.functorParser)(Data_Semigroup.append(Text_Parsing_StringParser.semigroupParser(Data_List_Types.semigroupList))(Data_Functor.mapFlipped(Text_Parsing_StringParser.functorParser)(Text_Parsing_StringParser_String.upperCaseChar)(Control_Applicative.pure(Data_List_Types.applicativeList)))(Text_Parsing_StringParser_Combinators.many(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_String.alphaNum)(Text_Parsing_StringParser_String["char"]("_")))))(function ($21) {
      return Data_String.fromCharArray(Data_Array.fromFoldable(Data_List_Types.foldableList)($21));
  });
  var parseModulePath = Data_Functor.mapFlipped(Text_Parsing_StringParser.functorParser)(sepBy1$prime(parseModuleName)(Text_Parsing_StringParser_String["char"](".")))(Types.ModulePath);
  var parseModuleStmt = Text_Parsing_StringParser_Combinators.between(Data_Semigroup.append(Text_Parsing_StringParser.semigroupParser(Data_Semigroup.semigroupString))(Control_Alt.alt(Text_Parsing_StringParser.altParser)(Text_Parsing_StringParser_String.string("module"))(Text_Parsing_StringParser_String.string("port module")))(Text_Parsing_StringParser_String.whiteSpace))(Text_Parsing_StringParser_String.whiteSpace)(parseModulePath);
  var parseImportStmt = Text_Parsing_StringParser_Combinators.between(Data_Semigroup.append(Text_Parsing_StringParser.semigroupParser(Data_Semigroup.semigroupString))(Text_Parsing_StringParser_String.string("import"))(Text_Parsing_StringParser_String.whiteSpace))(Text_Parsing_StringParser_Combinators.many(Text_Parsing_StringParser_String.noneOf(Data_Foldable.foldableArray)([ "\x0a" ])))(parseModulePath);
  var parseImports = function (v) {
      return Data_Array.mapMaybe(function ($22) {
          return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Text_Parsing_StringParser.runParser(parseImportStmt)($22));
      })(Data_String.split("\x0a")(v));
  };
  var elmParseModuleData = function (v) {
      return function (v1) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Text_Parsing_StringParser.runParser(parseModuleStmt)(v1)))(function (v2) {
              var imports = parseImports(v1);
              return Data_Maybe.Just.create({
                  modulePath: v2,
                  imports: imports
              });
          });
      };
  };
  var elmModulePathToFilePath = function (v) {
      return Data_Maybe.fromJust()(Pathy_Parser.parseRelFile(Pathy_Parser.posixParser)((function (v1) {
          return v1 + ".elm";
      })(Data_String.joinWith("/")(Data_Array.fromFoldable(Data_NonEmpty.foldableNonEmpty(Data_Foldable.foldableArray))(v)))));
  };
  var langSpecs = function (lang) {
      return {
          id: "elm",
          modulePathToFilePath: elmModulePathToFilePath,
          parseModuleData: elmParseModuleData
      };
  };
  exports["langSpecs"] = langSpecs;
  exports["elmModulePathToFilePath"] = elmModulePathToFilePath;
  exports["parseModuleName"] = parseModuleName;
  exports["parseModulePath"] = parseModulePath;
  exports["parseModuleStmt"] = parseModuleStmt;
  exports["parseImportStmt"] = parseImportStmt;
  exports["parseImports"] = parseImports;
  exports["elmParseModuleData"] = elmParseModuleData;
})(PS["Specs"] = PS["Specs"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Copy = PS["Copy"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Either = PS["Data.Either"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS = PS["Node.FS"];
  var Node_FS_Stats = PS["Node.FS.Stats"];
  var Node_FS_Sync = PS["Node.FS.Sync"];
  var Node_Process = PS["Node.Process"];
  var Pathy = PS["Pathy"];
  var Pathy_Parser = PS["Pathy.Parser"];
  var Pathy_Path = PS["Pathy.Path"];
  var Pathy_Phantom = PS["Pathy.Phantom"];
  var Pathy_Printer = PS["Pathy.Printer"];
  var Pathy_Sandboxed = PS["Pathy.Sandboxed"];
  var Prelude = PS["Prelude"];
  var Specs = PS["Specs"];
  var Types = PS["Types"];        
  var printPath$prime = function (dictIsRelOrAbs) {
      return function (dictIsDirOrFile) {
          return function (path) {
              return Pathy_Printer.unsafePrintPath(dictIsRelOrAbs)(dictIsDirOrFile)(Pathy_Printer.posixPrinter)(Pathy_Sandboxed.sandboxAny(path));
          };
      };
  };
  var readTextFileErr = function (absFilePath) {
      return Data_Functor.mapFlipped(Control_Monad_Eff.functorEff)(Control_Monad_Eff_Exception["try"](Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(printPath$prime(Pathy_Phantom.absIsRelOrAbs)(Pathy_Phantom.isDirOrFileFile)(absFilePath))))(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Function["const"](new Types.ErrReadTextFile(absFilePath))));
  };
  var parseArgs = function (xs) {
      return Data_Either.Right.create(Data_Maybe.maybe(false)(function (v) {
          return Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(v)([ "--help", "-h" ]);
      })(Data_Array.index(xs)(2)));
  };
  var parseAnyFileErr = function (str) {
      return Data_Either.note(new Types.ErrParseFilePath(str))(Pathy_Parser.parseRelFile(Pathy_Parser.posixParser)(str));
  };
  var parseAnyDirErr = function (baseDir) {
      return function (dir) {
          return Data_Either.note(new Types.ErrParseDirPath(dir))(Control_Alt.alt(Data_Maybe.altMaybe)(Pathy_Parser.parseAbsDir(Pathy_Parser.posixParser)(dir))(Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(Pathy_Parser.parseRelDir(Pathy_Parser.posixParser)(dir))(function (v) {
              return Pathy_Path.appendPath(Pathy_Phantom.absIsRelOrAbs)(baseDir)(v);
          })));
      };
  };
  var outputHelp = Copy.copy.help.title;
  var modulePathToStr = function (v) {
      return Data_String.joinWith(".")(Data_Array.fromFoldable(Data_NonEmpty.foldableNonEmpty(Data_Foldable.foldableArray))(v));
  };
  var handleOutput = function (output1) {
      if (output1 instanceof Data_Either.Left) {
          return function __do() {
              Control_Monad_Eff_Console.error(output1.value0)();
              return Node_Process.exit(1)();
          };
      };
      if (output1 instanceof Data_Either.Right) {
          return function __do() {
              Control_Monad_Eff_Console.log(output1.value0)();
              return Node_Process.exit(0)();
          };
      };
      throw new Error("Failed pattern match at Main line 216, column 3 - line 224, column 1: " + [ output1.constructor.name ]);
  };
  var getDot = function (v) {
      var f = function (v1) {
          return Copy.withTicks(modulePathToStr(v1.value1)) + (" -> " + (Copy.withTicks(modulePathToStr(v1.value0)) + ";"));
      };
      return Types.SourceStrDot("digraph {\x0a" + ("rankdir=LR;\x0a" + (Data_String.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(f)(v)) + "}")));
  };
  var fileExists = function (absFile) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.either(Data_Function["const"](false))(function (v) {
          return v.value0.isFile();
      }))(Control_Monad_Eff_Exception["try"](Node_FS_Sync.stat(printPath$prime(Pathy_Phantom.absIsRelOrAbs)(Pathy_Phantom.isDirOrFileFile)(absFile))));
  };
  var followImport = function (absDir) {
      return function (modulePath) {
          return function (relFile) {
              return fileExists(Pathy_Path.appendPath(Pathy_Phantom.absIsRelOrAbs)(absDir)(relFile));
          };
      };
  };
  var envLookupErr = function (env) {
      return Data_Functor.mapFlipped(Control_Monad_Eff.functorEff)(Node_Process.lookupEnv(env))(Data_Either.note(new Types.ErrEnvLookup(env)));
  };
  var constants = {
      maxDepthLevel: 100
  };
  var visit = function (level) {
      return function (langSpec) {
          return function (baseDir) {
              return function (filePathRel) {
                  var filePathAbs = Pathy_Path.appendPath(Pathy_Phantom.absIsRelOrAbs)(baseDir)(filePathRel);
                  var next = function (path) {
                      return visit(level + 1 | 0)(langSpec)(baseDir)(langSpec.modulePathToFilePath(path));
                  };
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Control_Applicative.when(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Eff.monadEff))(level > constants.maxDepthLevel)(Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_Eff.monadEff))(new Types.ErrMaxDepthLevel(constants.maxDepthLevel))))(function () {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Eff.functorEff))(Types.SourceStr)(Data_Newtype.wrap(Control_Monad_Except_Trans.newtypeExceptT)(readTextFileErr(filePathAbs))))(function (v) {
                          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Control_Monad_Except_Trans.except(Control_Monad_Eff.applicativeEff)(Data_Either.note(new Types.ErrParseModule(filePathAbs, v))(langSpec.parseModuleData(filePathRel)(v))))(function (v1) {
                              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_Eff.monadEff)(Data_Functor.mapFlipped(Control_Monad_Eff.functorEff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(function (modulePath1) {
                                  return function __do() {
                                      var v2 = followImport(baseDir)(modulePath1)(langSpec.modulePathToFilePath(modulePath1))();
                                      if (v2) {
                                          return new Data_Maybe.Just(modulePath1);
                                      };
                                      return Data_Maybe.Nothing.value;
                                  };
                              })(v1.imports))(Data_Array.mapMaybe(Control_Category.id(Control_Category.categoryFn)))))(function (v2) {
                                  var depsHere = Types.DependencyGraph(Data_Functor.map(Data_Functor.functorArray)(Types.Dependency.create(v1.modulePath))(v2));
                                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Eff.monadEff))(next)(v2))(function (v3) {
                                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Eff.monadEff))(Data_Semigroup.append(Types.semigroupDependencyGraph)(depsHere)(Data_Foldable.fold(Data_Foldable.foldableArray)(Types.monoidDependencyGraph)(v3)));
                                  });
                              });
                          });
                      });
                  });
              };
          };
      };
  };
  var runMain = function (v) {
      var langSpec = Specs.langSpecs(v.value0.language);
      return Control_Monad_Except_Trans.runExceptT(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Eff.functorEff))(visit(0)(langSpec)(v.value0.directory)(v.value0.main))(function (v1) {
          return Data_Array.nub(Types.eqDependency)(v1);
      }));
  };
  var run = function (task) {
      if (task instanceof Data_Either.Right && task.value0 instanceof Types.TaskHelp) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Types.ResultHelp.value);
      };
      if (task instanceof Data_Either.Right && task.value0 instanceof Types.TaskMain) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.either(Types.ResultErr.create)(Types.ResultMain.create))(runMain(task.value0.value0));
      };
      if (task instanceof Data_Either.Left) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(new Types.ResultErr(task.value0));
      };
      throw new Error("Failed pattern match at Main line 118, column 3 - line 121, column 37: " + [ task.constructor.name ]);
  };
  var allLanguages = Data_Enum.enumFromTo(Types.enumLanguage)(Data_Unfoldable.unfoldableArray)(Data_Bounded.bottom(Types.boundedLanguage))(Data_Bounded.top(Types.boundedLanguage));
  var outputError = function (err) {
      if (err instanceof Types.ErrReadTextFile) {
          return Copy.copy.errors.readTextFile(printPath$prime(Pathy_Phantom.absIsRelOrAbs)(Pathy_Phantom.isDirOrFileFile)(err.value0));
      };
      if (err instanceof Types.ErrEnvLookup) {
          return Copy.copy.errors.envLookup(err.value0);
      };
      if (err instanceof Types.ErrParseLang) {
          return Copy.copy.errors.parseLang(err.value0)(Data_Functor.map(Data_Functor.functorArray)(function ($82) {
              return (function (v) {
                  return v.id;
              })(Data_Newtype.unwrap(Types.newtypeLangSpec)(Specs.langSpecs($82)));
          })(allLanguages));
      };
      if (err instanceof Types.ErrParseDirPath) {
          return Copy.copy.errors.parseDirPath(err.value0);
      };
      if (err instanceof Types.ErrParseFilePath) {
          return Copy.copy.errors.parseFilePath(err.value0);
      };
      if (err instanceof Types.ErrParseModule) {
          return Copy.copy.errors.parseModule(printPath$prime(Pathy_Phantom.absIsRelOrAbs)(Pathy_Phantom.isDirOrFileFile)(err.value0));
      };
      if (err instanceof Types.ErrMaxDepthLevel) {
          return Copy.copy.errors.maxDepthLevel(Data_Show.show(Data_Show.showInt)(err.value0));
      };
      if (err instanceof Types.ErrUnknown) {
          return Copy.copy.errors.unknown;
      };
      throw new Error("Failed pattern match at Main line 189, column 3 - line 205, column 26: " + [ err.constructor.name ]);
  };
  var output = function (result) {
      if (result instanceof Types.ResultHelp) {
          return new Data_Either.Right(outputHelp);
      };
      if (result instanceof Types.ResultMain) {
          var v = getDot(result.value0);
          return new Data_Either.Right(v);
      };
      if (result instanceof Types.ResultErr) {
          return Data_Either.Left.create(outputError(result.value0));
      };
      throw new Error("Failed pattern match at Main line 179, column 3 - line 185, column 29: " + [ result.constructor.name ]);
  };
  var parseLangErr = function (str) {
      return Data_Either.note(new Types.ErrParseLang(str))(Data_Foldable.find(Data_Foldable.foldableArray)(function ($83) {
          return (function ($84) {
              return (function (v) {
                  return v === str;
              })((function (v) {
                  return v.id;
              })($84));
          })(Data_Newtype.unwrap(Types.newtypeLangSpec)(Specs.langSpecs($83)));
      })(allLanguages));
  };
  var getTask = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Data_Newtype.wrap(Control_Monad_Except_Trans.newtypeExceptT)(Data_Functor.map(Control_Monad_Eff.functorEff)(parseArgs)(Node_Process.argv)))(function (v) {
      if (v) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Eff.monadEff))(Types.TaskHelp.value);
      };
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Data_Newtype.wrap(Control_Monad_Except_Trans.newtypeExceptT)(Data_Functor.mapFlipped(Control_Monad_Eff.functorEff)(envLookupErr("LANGUAGE"))(function (v1) {
          return Control_Bind.bind(Data_Either.bindEither)(v1)(parseLangErr);
      })))(function (v1) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Data_Newtype.wrap(Control_Monad_Except_Trans.newtypeExceptT)(Data_Functor.mapFlipped(Control_Monad_Eff.functorEff)(Node_Process.cwd)(function ($85) {
              return Data_Either.note(Types.ErrUnknown.value)(Pathy_Parser.parseAbsDir(Pathy_Parser.posixParser)((function (v2) {
                  return v2 + "/";
              })($85)));
          })))(function (v2) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Data_Newtype.wrap(Control_Monad_Except_Trans.newtypeExceptT)(Data_Functor.mapFlipped(Control_Monad_Eff.functorEff)(envLookupErr("DIR"))(function (v3) {
                  return Control_Bind.bind(Data_Either.bindEither)(v3)(parseAnyDirErr(v2));
              })))(function (v3) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Data_Newtype.wrap(Control_Monad_Except_Trans.newtypeExceptT)(Data_Functor.mapFlipped(Control_Monad_Eff.functorEff)(envLookupErr("MAIN"))(function (v4) {
                      return Control_Bind.bind(Data_Either.bindEither)(v4)(parseAnyFileErr);
                  })))(function (v4) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Eff.monadEff))(new Types.TaskMain(new Types.Config({
                          language: v1,
                          directory: v3,
                          main: v4
                      })));
                  });
              });
          });
      });
  });
  var main = function __do() {
      var v = Control_Monad_Except_Trans.runExceptT(getTask)();
      var v1 = run(v)();
      return handleOutput(output(v1))();
  };
  exports["constants"] = constants;
  exports["getTask"] = getTask;
  exports["parseArgs"] = parseArgs;
  exports["readTextFileErr"] = readTextFileErr;
  exports["envLookupErr"] = envLookupErr;
  exports["parseLangErr"] = parseLangErr;
  exports["parseAnyDirErr"] = parseAnyDirErr;
  exports["parseAnyFileErr"] = parseAnyFileErr;
  exports["run"] = run;
  exports["runMain"] = runMain;
  exports["visit"] = visit;
  exports["followImport"] = followImport;
  exports["output"] = output;
  exports["outputError"] = outputError;
  exports["outputHelp"] = outputHelp;
  exports["handleOutput"] = handleOutput;
  exports["getDot"] = getDot;
  exports["modulePathToStr"] = modulePathToStr;
  exports["printPath'"] = printPath$prime;
  exports["allLanguages"] = allLanguages;
  exports["fileExists"] = fileExists;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();