// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  }; 
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };       
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
  exports["error"] = $foreign.error;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 270, column 1 - line 270, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromJust"] = fromJust;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap(dictNewtype);
      };
  };
  var over2 = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($60) {
                      return function ($61) {
                          return wrap(dictNewtype1)(Data_Function.on(f)(unwrap(dictNewtype))($60)($61));
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["un"] = un;
  exports["over2"] = over2;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["fold"] = fold;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];        
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 36, column 1 - line 36, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 229, column 1 - line 229, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 43, column 1 - line 43, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var $$try = function (action) {
      return $foreign.catchException(function ($0) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Either.Left.create($0));
      })(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)(action));
  };
  exports["try"] = $$try;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();                                                                                                 
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };
  var newtypeExceptT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ExceptT);
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var except = function (dictApplicative) {
      return function ($96) {
          return ExceptT(Control_Applicative.pure(dictApplicative)($96));
      };
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["except"] = except;
  exports["newtypeExceptT"] = newtypeExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  exports["NonEmpty"] = NonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
    "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.replaceAll = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2);
      };
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["singleton"] = $foreign.singleton;
  exports["replaceAll"] = $foreign.replaceAll;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var NonEmptyString = function (x) {
      return x;
  };
  var toString = function (v) {
      return v;
  };
  var singleton = function ($74) {
      return NonEmptyString(Data_String.singleton($74));
  }; 
  var semigroupNonEmptyString = Data_Semigroup.semigroupString;
  var replaceAll = function (pat) {
      return function (v) {
          return function (v1) {
              return Data_String.replaceAll(pat)(v)(v1);
          };
      };
  };
  var fromString = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(v);
  };
  var unsafeFromString = function (dictPartial) {
      return function ($83) {
          return Data_Maybe.fromJust(dictPartial)(fromString($83));
      };
  };
  exports["fromString"] = fromString;
  exports["unsafeFromString"] = unsafeFromString;
  exports["singleton"] = singleton;
  exports["toString"] = toString;
  exports["replaceAll"] = replaceAll;
  exports["semigroupNonEmptyString"] = semigroupNonEmptyString;
})(PS["Data.String.NonEmpty"] = PS["Data.String.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Unit = PS["Data.Unit"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var $$undefined = Data_Unit.unit;
  exports["undefined"] = $$undefined;
})(PS["Data.Typelevel.Undefined"] = PS["Data.Typelevel.Undefined"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.Encoding"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding line 19, column 1 - line 19, column 39: " + [ v.constructor.name ]);
  });
  exports["ASCII"] = ASCII;
  exports["UTF8"] = UTF8;
  exports["UTF16LE"] = UTF16LE;
  exports["UCS2"] = UCS2;
  exports["Base64"] = Base64;
  exports["Latin1"] = Latin1;
  exports["Binary"] = Binary;
  exports["Hex"] = Hex;
  exports["showEncoding"] = showEncoding;
})(PS["Node.Encoding"] = PS["Node.Encoding"] || {});
(function(exports) {
    "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Node.FS.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var mkEff = Unsafe_Coerce.unsafeCoerce;
  exports["mkEff"] = mkEff;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS = PS["Node.FS"];
  var Node_FS_Internal = PS["Node.FS.Internal"];
  var Node_FS_Perms = PS["Node.FS.Perms"];
  var Node_FS_Stats = PS["Node.FS.Stats"];
  var Node_Path = PS["Node.Path"];
  var Prelude = PS["Prelude"];        
  var fs = Node_FS_Internal.unsafeRequireFS;
  var readTextFile = function (encoding) {
      return function (file) {
          return Node_FS_Internal.mkEff(function (v) {
              return fs.readFileSync(file, {
                  encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
              });
          });
      };
  };
  exports["readTextFile"] = readTextFile;
})(PS["Node.FS.Sync"] = PS["Node.FS.Sync"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];        
  var IsRelOrAbs = function (onRelOrAbs) {
      this.onRelOrAbs = onRelOrAbs;
  };
  var IsDirOrFile = function (onDirOrFile) {
      this.onDirOrFile = onDirOrFile;
  };
  var relIsRelOrAbs = new IsRelOrAbs(function (f) {
      return function (v) {
          return f(Control_Category.id(Control_Category.categoryFn));
      };
  });
  var onRelOrAbs = function (dict) {
      return dict.onRelOrAbs;
  };
  var onDirOrFile = function (dict) {
      return dict.onDirOrFile;
  };
  var isDirOrFileFile = new IsDirOrFile(function (v) {
      return function (f) {
          return f(Control_Category.id(Control_Category.categoryFn));
      };
  });
  var isDirOrFileDir = new IsDirOrFile(function (f) {
      return function (v) {
          return f(Control_Category.id(Control_Category.categoryFn));
      };
  });
  var foldRelOrAbs = function (dictIsRelOrAbs) {
      return function (f) {
          return function (g) {
              return onRelOrAbs(dictIsRelOrAbs)(Data_Function["const"](f))(Data_Function["const"](g));
          };
      };
  };
  var foldDirOrFile = function (dictIsDirOrFile) {
      return function (f) {
          return function (g) {
              return onDirOrFile(dictIsDirOrFile)(Data_Function["const"](f))(Data_Function["const"](g));
          };
      };
  };
  var absIsRelOrAbs = new IsRelOrAbs(function (v) {
      return function (f) {
          return f(Control_Category.id(Control_Category.categoryFn));
      };
  });
  exports["onDirOrFile"] = onDirOrFile;
  exports["onRelOrAbs"] = onRelOrAbs;
  exports["IsRelOrAbs"] = IsRelOrAbs;
  exports["foldRelOrAbs"] = foldRelOrAbs;
  exports["IsDirOrFile"] = IsDirOrFile;
  exports["foldDirOrFile"] = foldDirOrFile;
  exports["relIsRelOrAbs"] = relIsRelOrAbs;
  exports["absIsRelOrAbs"] = absIsRelOrAbs;
  exports["isDirOrFileDir"] = isDirOrFileDir;
  exports["isDirOrFileFile"] = isDirOrFileFile;
})(PS["Pathy.Phantom"] = PS["Pathy.Phantom"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Ordering = PS["Data.Ordering"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Equals = {};        
  var equalsEQGT = Equals;
  exports["Equals"] = Equals;
  exports["equalsEQGT"] = equalsEQGT;
})(PS["Type.Data.Ordering"] = PS["Type.Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Symbol = PS["Data.Symbol"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_Ordering = PS["Type.Data.Ordering"];        
  var CompareSymbol = {};
  var Equals = {};
  var equalsSymbol = function (dictCompareSymbol) {
      return function (dictEquals) {
          return Equals;
      };
  };
  exports["CompareSymbol"] = CompareSymbol;
  exports["Equals"] = Equals;
  exports["equalsSymbol"] = equalsSymbol;
})(PS["Type.Data.Symbol"] = PS["Type.Data.Symbol"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_NonEmpty = PS["Data.String.NonEmpty"];
  var Data_Symbol = PS["Data.Symbol"];
  var Pathy_Phantom = PS["Pathy.Phantom"];
  var Prelude = PS["Prelude"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Name = function (x) {
      return x;
  };
  var IsName = function (reflectName) {
      this.reflectName = reflectName;
  }; 
  var reflectName = function (dict) {
      return dict.reflectName;
  };                                                   
  var newtypeName = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Name);
  var isNameNESymbol = function (dictIsSymbol) {
      return function (dictEquals) {
          return new IsName(function (v) {
              return Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
          });
      };
  };
  exports["reflectName"] = reflectName;
  exports["Name"] = Name;
  exports["IsName"] = IsName;
  exports["newtypeName"] = newtypeName;
  exports["isNameNESymbol"] = isNameNESymbol;
})(PS["Pathy.Name"] = PS["Pathy.Name"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String_NonEmpty = PS["Data.String.NonEmpty"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Pathy_Name = PS["Pathy.Name"];
  var Pathy_Phantom = PS["Pathy.Phantom"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Init = (function () {
      function Init() {

      };
      Init.value = new Init();
      return Init;
  })();
  var ParentOf = (function () {
      function ParentOf(value0) {
          this.value0 = value0;
      };
      ParentOf.create = function (value0) {
          return new ParentOf(value0);
      };
      return ParentOf;
  })();
  var In = (function () {
      function In(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      In.create = function (value0) {
          return function (value1) {
              return new In(value0, value1);
          };
      };
      return In;
  })();
  var rootDir = Init.value;
  var foldPath = function (r) {
      return function (f) {
          return function (g) {
              return function (v) {
                  if (v instanceof Init) {
                      return r;
                  };
                  if (v instanceof ParentOf) {
                      return f(v.value0);
                  };
                  if (v instanceof In) {
                      return g(v.value0)(v.value1);
                  };
                  throw new Error("Failed pattern match at Pathy.Path line 199, column 18 - line 202, column 18: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var name = function (dictIsRelOrAbs) {
      return function (dictIsDirOrFile) {
          return foldPath(Data_Maybe.Nothing.value)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Function["const"](Data_Maybe.Just.create));
      };
  };
  var peel = foldPath(Data_Maybe.Nothing.value)(Data_Function["const"](Data_Maybe.Nothing.value))(function (p) {
      return function (n) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(p, n));
      };
  });
  var parentOf = function (dictIsRelOrAbs) {
      return Pathy_Phantom.onRelOrAbs(dictIsRelOrAbs)(function (coe) {
          return function (p) {
              return Data_Maybe.maybe(new ParentOf(p))(function ($103) {
                  return coe(Data_Tuple.fst($103));
              })(peel(p));
          };
      })(function (coe) {
          return function ($104) {
              return coe(Data_Maybe.maybe(Init.value)(Data_Tuple.fst)(peel($104)));
          };
      });
  };
  var currentDir = Init.value;
  var in$prime = In.create(currentDir);
  var file$prime = in$prime;
  var file = function (dictIsName) {
      return function ($108) {
          return file$prime(Pathy_Name.reflectName(dictIsName)($108));
      };
  };
  var appendPath = function (dictIsRelOrAbs) {
      return function (v) {
          return function (v1) {
              if (v instanceof Init && v1 instanceof Init) {
                  return Init.value;
              };
              if (v instanceof ParentOf && v1 instanceof Init) {
                  return new ParentOf(appendPath(Pathy_Phantom.relIsRelOrAbs)(v.value0)(Init.value));
              };
              if (v instanceof In && v1 instanceof Init) {
                  return new In(appendPath(dictIsRelOrAbs)(v.value0)(Init.value), v.value1);
              };
              if (v1 instanceof ParentOf) {
                  return parentOf(dictIsRelOrAbs)(appendPath(dictIsRelOrAbs)(v)(v1.value0));
              };
              if (v1 instanceof In) {
                  return new In(appendPath(dictIsRelOrAbs)(v)(v1.value0), v1.value1);
              };
              throw new Error("Failed pattern match at Pathy.Path line 162, column 14 - line 167, column 34: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["rootDir"] = rootDir;
  exports["currentDir"] = currentDir;
  exports["file"] = file;
  exports["parentOf"] = parentOf;
  exports["appendPath"] = appendPath;
  exports["foldPath"] = foldPath;
  exports["peel"] = peel;
  exports["name"] = name;
})(PS["Pathy.Path"] = PS["Pathy.Path"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Pathy_Path = PS["Pathy.Path"];
  var Pathy_Phantom = PS["Pathy.Phantom"];
  var Prelude = PS["Prelude"];        
  var SandboxedPath = (function () {
      function SandboxedPath(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SandboxedPath.create = function (value0) {
          return function (value1) {
              return new SandboxedPath(value0, value1);
          };
      };
      return SandboxedPath;
  })();
  var unsandbox = function (v) {
      return v.value1;
  };
  var sandboxAny = function (p) {
      return new SandboxedPath(Pathy_Path.rootDir, p);
  };
  exports["sandboxAny"] = sandboxAny;
  exports["unsandbox"] = unsandbox;
})(PS["Pathy.Sandboxed"] = PS["Pathy.Sandboxed"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_String_NonEmpty = PS["Data.String.NonEmpty"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Pathy_Name = PS["Pathy.Name"];
  var Pathy_Path = PS["Pathy.Path"];
  var Pathy_Phantom = PS["Pathy.Phantom"];
  var Pathy_Sandboxed = PS["Pathy.Sandboxed"];
  var Prelude = PS["Prelude"];        
  var Escaper = function (x) {
      return x;
  };
  var slashEscaper = (function () {
      var dash = Data_String_NonEmpty.singleton("-");
      return Data_String_NonEmpty.replaceAll("/")(dash);
  })();
  var semigroupEscaper = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function ($29) {
              return v(v1($29));
          };
      };
  });
  var newtypeEscaper = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Escaper);
  var printSegment = function (dictNewtype) {
      return function (printer) {
          return function ($30) {
              return Data_String_NonEmpty.toString(Data_Newtype.un(newtypeEscaper)(Escaper)(printer.escaper)(Data_Newtype.unwrap(dictNewtype)($30)));
          };
      };
  };
  var printPathRep = function (dictIsRelOrAbs) {
      return function (dictIsDirOrFile) {
          return function (printer) {
              return function (inputPath) {
                  var isAbs = Pathy_Phantom.foldRelOrAbs(dictIsRelOrAbs)(Data_Function["const"](false))(Data_Function["const"](true))(inputPath);
                  var caseCurrent = (function () {
                      if (isAbs) {
                          return printer.root(Data_Maybe.Nothing.value);
                      };
                      return Data_String_NonEmpty.toString(Data_Semigroup.append(Data_String_NonEmpty.semigroupNonEmptyString)(printer.current)(printer.sep));
                  })();
                  var go = function (dictIsRelOrAbs1) {
                      return function (dictIsDirOrFile1) {
                          return Pathy_Path.foldPath(caseCurrent)(caseParentOf)(caseIn(dictIsRelOrAbs1)(dictIsDirOrFile1));
                      };
                  };
                  var caseParentOf = function (p) {
                      return go(Pathy_Phantom.relIsRelOrAbs)(Pathy_Phantom.isDirOrFileDir)(p) + Data_String_NonEmpty.toString(Data_Semigroup.append(Data_String_NonEmpty.semigroupNonEmptyString)(printer.up)(printer.sep));
                  };
                  var caseIn = function (dictIsRelOrAbs1) {
                      return function (dictIsDirOrFile1) {
                          return function (p) {
                              return function (name) {
                                  return Pathy_Phantom.foldDirOrFile(dictIsDirOrFile1)(function (dirName) {
                                      return Pathy_Path.foldPath((function () {
                                          if (isAbs) {
                                              return printer.root(Data_Maybe.Just.create(Data_Newtype.unwrap(Pathy_Name.newtypeName)(dirName))) + Data_String_NonEmpty.toString(printer.sep);
                                          };
                                          return caseCurrent + (printSegment(Pathy_Name.newtypeName)(printer)(dirName) + Data_String_NonEmpty.toString(printer.sep));
                                      })())(function (p$prime) {
                                          return caseParentOf(p$prime) + (printSegment(Pathy_Name.newtypeName)(printer)(dirName) + Data_String_NonEmpty.toString(printer.sep));
                                      })(function (p$prime) {
                                          return function (n$prime) {
                                              return caseIn(dictIsRelOrAbs1)(Pathy_Phantom.isDirOrFileDir)(p$prime)(n$prime) + (printSegment(Pathy_Name.newtypeName)(printer)(dirName) + Data_String_NonEmpty.toString(printer.sep));
                                          };
                                      })(p);
                                  })(function (fileName) {
                                      return go(dictIsRelOrAbs1)(Pathy_Phantom.isDirOrFileDir)(p) + printSegment(Pathy_Name.newtypeName)(printer)(fileName);
                                  })(name);
                              };
                          };
                      };
                  };
                  return go(dictIsRelOrAbs)(dictIsDirOrFile)(inputPath);
              };
          };
      };
  };
  var unsafePrintPath = function (dictIsRelOrAbs) {
      return function (dictIsDirOrFile) {
          return function (r) {
              return function (sp) {
                  return printPathRep(dictIsRelOrAbs)(dictIsDirOrFile)(r)(Pathy_Sandboxed.unsandbox(sp));
              };
          };
      };
  };
  var dotEscaper = function (s) {
      var v = Data_String_NonEmpty.toString(s);
      if (v === "..") {
          return Data_String_NonEmpty.unsafeFromString()("$dot$dot");
      };
      if (v === ".") {
          return Data_String_NonEmpty.unsafeFromString()("$dot");
      };
      return s;
  };
  var posixEscaper = Data_Semigroup.append(semigroupEscaper)(slashEscaper)(dotEscaper);
  var posixPrinter = {
      root: Data_Maybe.maybe("/")(function (name) {
          return "/" + Data_String_NonEmpty.toString(Data_Newtype.un(newtypeEscaper)(Escaper)(posixEscaper)(name));
      }),
      current: Data_String_NonEmpty.singleton("."),
      up: Data_Semigroup.append(Data_String_NonEmpty.semigroupNonEmptyString)(Data_String_NonEmpty.singleton("."))(Data_String_NonEmpty.singleton(".")),
      sep: Data_String_NonEmpty.singleton("/"),
      escaper: posixEscaper
  };
  exports["posixPrinter"] = posixPrinter;
  exports["unsafePrintPath"] = unsafePrintPath;
  exports["Escaper"] = Escaper;
  exports["slashEscaper"] = slashEscaper;
  exports["dotEscaper"] = dotEscaper;
  exports["posixEscaper"] = posixEscaper;
  exports["newtypeEscaper"] = newtypeEscaper;
  exports["semigroupEscaper"] = semigroupEscaper;
})(PS["Pathy.Printer"] = PS["Pathy.Printer"] || {});
(function(exports) {
    "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Pathy = PS["Pathy"];
  var Prelude = PS["Prelude"];
  var SourceStr = function (x) {
      return x;
  };
  var ModulePath = function (x) {
      return x;
  };
  var Elm = (function () {
      function Elm() {

      };
      Elm.value = new Elm();
      return Elm;
  })();
  var Bla = (function () {
      function Bla() {

      };
      Bla.value = new Bla();
      return Bla;
  })();
  var ErrReadTextFile = (function () {
      function ErrReadTextFile(value0) {
          this.value0 = value0;
      };
      ErrReadTextFile.create = function (value0) {
          return new ErrReadTextFile(value0);
      };
      return ErrReadTextFile;
  })();
  var LangSpec = (function () {
      function LangSpec(value0) {
          this.value0 = value0;
      };
      LangSpec.create = function (value0) {
          return new LangSpec(value0);
      };
      return LangSpec;
  })();
  var Dependency = (function () {
      function Dependency(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Dependency.create = function (value0) {
          return function (value1) {
              return new Dependency(value0, value1);
          };
      };
      return Dependency;
  })();

  //------------------------------------------------------------------------------
  // MAIN
  //------------------------------------------------------------------------------
  var DependencyGraph = function (x) {
      return x;
  };
  var ResultHelp = (function () {
      function ResultHelp() {

      };
      ResultHelp.value = new ResultHelp();
      return ResultHelp;
  })();
  var ResultMain = (function () {
      function ResultMain(value0) {
          this.value0 = value0;
      };
      ResultMain.create = function (value0) {
          return new ResultMain(value0);
      };
      return ResultMain;
  })();

  //------------------------------------------------------------------------------
  // Lifecycle
  //------------------------------------------------------------------------------
  var TaskHelp = (function () {
      function TaskHelp() {

      };
      TaskHelp.value = new TaskHelp();
      return TaskHelp;
  })();

  //------------------------------------------------------------------------------
  // Lifecycle
  //------------------------------------------------------------------------------
  var TaskMain = (function () {
      function TaskMain(value0) {
          this.value0 = value0;
      };
      TaskMain.create = function (value0) {
          return new TaskMain(value0);
      };
      return TaskMain;
  })();
  var newtypeDependencyGraph = new Data_Newtype.Newtype(function (n) {
      return n;
  }, DependencyGraph);
  var semigroupDependencyGraph = new Data_Semigroup.Semigroup(Data_Newtype.over2(newtypeDependencyGraph)(newtypeDependencyGraph)(Data_Newtype.wrap(newtypeDependencyGraph))(Data_Semigroup.append(Data_Semigroup.semigroupArray)));
  var monoidDependencyGraph = new Data_Monoid.Monoid(function () {
      return semigroupDependencyGraph;
  }, Data_Newtype.wrap(newtypeDependencyGraph)([  ]));
  exports["TaskHelp"] = TaskHelp;
  exports["TaskMain"] = TaskMain;
  exports["ResultHelp"] = ResultHelp;
  exports["ResultMain"] = ResultMain;
  exports["DependencyGraph"] = DependencyGraph;
  exports["Dependency"] = Dependency;
  exports["ModulePath"] = ModulePath;
  exports["LangSpec"] = LangSpec;
  exports["SourceStr"] = SourceStr;
  exports["ErrReadTextFile"] = ErrReadTextFile;
  exports["Elm"] = Elm;
  exports["Bla"] = Bla;
  exports["newtypeDependencyGraph"] = newtypeDependencyGraph;
  exports["semigroupDependencyGraph"] = semigroupDependencyGraph;
  exports["monoidDependencyGraph"] = monoidDependencyGraph;
})(PS["Types"] = PS["Types"] || {});
(function(exports) {
    "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Symbol = PS["Data.Symbol"];
  var Pathy = PS["Pathy"];
  var Pathy_Name = PS["Pathy.Name"];
  var Pathy_Path = PS["Pathy.Path"];
  var Prelude = PS["Prelude"];
  var Type_Data_Ordering = PS["Type.Data.Ordering"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Type_Prelude = PS["Type.Prelude"];
  var Types = PS["Types"];        
  var langSpecs = function (lang) {
      if (lang instanceof Types.Elm) {
          return new Types.LangSpec({
              modulePathToFilePath: function (v) {
                  return Pathy_Path.file(Pathy_Name.isNameNESymbol(new Data_Symbol.IsSymbol(function () {
                      return "Main.elm";
                  }))(Type_Data_Symbol.equalsSymbol(Type_Data_Symbol.CompareSymbol)(Type_Data_Ordering.equalsEQGT)))(Data_Symbol.SProxy.value);
              },
              parseModuleData: function (v) {
                  return function (v1) {
                      return Data_Either.Right.create({
                          modulePath: Types.ModulePath(new Data_NonEmpty.NonEmpty("Main", [  ])),
                          imports: [  ]
                      });
                  };
              }
          });
      };
      if (lang instanceof Types.Bla) {
          return new Types.LangSpec({
              modulePathToFilePath: function (v) {
                  return Pathy_Path.file(Pathy_Name.isNameNESymbol(new Data_Symbol.IsSymbol(function () {
                      return "Main.elm";
                  }))(Type_Data_Symbol.equalsSymbol(Type_Data_Symbol.CompareSymbol)(Type_Data_Ordering.equalsEQGT)))(Data_Symbol.SProxy.value);
              },
              parseModuleData: function (v) {
                  return function (v1) {
                      return Data_Either.Right.create({
                          modulePath: Types.ModulePath(new Data_NonEmpty.NonEmpty("Main", [  ])),
                          imports: [  ]
                      });
                  };
              }
          });
      };
      throw new Error("Failed pattern match at Specs line 13, column 3 - line 29, column 7: " + [ lang.constructor.name ]);
  };
  exports["langSpecs"] = langSpecs;
})(PS["Specs"] = PS["Specs"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Typelevel_Undefined = PS["Data.Typelevel.Undefined"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS = PS["Node.FS"];
  var Node_FS_Sync = PS["Node.FS.Sync"];
  var Node_Process = PS["Node.Process"];
  var Pathy = PS["Pathy"];
  var Pathy_Path = PS["Pathy.Path"];
  var Pathy_Phantom = PS["Pathy.Phantom"];
  var Pathy_Printer = PS["Pathy.Printer"];
  var Pathy_Sandboxed = PS["Pathy.Sandboxed"];
  var Prelude = PS["Prelude"];
  var Specs = PS["Specs"];
  var Types = PS["Types"];        
  var printPath$prime = function (dictIsRelOrAbs) {
      return function (dictIsDirOrFile) {
          return function (path) {
              return Pathy_Printer.unsafePrintPath(dictIsRelOrAbs)(dictIsDirOrFile)(Pathy_Printer.posixPrinter)(Pathy_Sandboxed.sandboxAny(path));
          };
      };
  };
  var readTextFileErr = function (absFilePath) {
      return Data_Functor.mapFlipped(Control_Monad_Eff.functorEff)(Control_Monad_Eff_Exception["try"](Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(printPath$prime(Pathy_Phantom.absIsRelOrAbs)(Pathy_Phantom.isDirOrFileFile)(absFilePath))))(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Function["const"](new Types.ErrReadTextFile(absFilePath))));
  };
  var visit = function (langSpec) {
      return function (baseDir) {
          return function (filePathRel) {
              var filePathAbs = Pathy_Path.appendPath(Pathy_Phantom.absIsRelOrAbs)(baseDir)(filePathRel);
              return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Control_Monad_Eff.functorEff))(Types.SourceStr)(Data_Newtype.wrap(Control_Monad_Except_Trans.newtypeExceptT)(readTextFileErr(filePathAbs))))(function (v) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Control_Monad_Except_Trans.except(Control_Monad_Eff.applicativeEff)(langSpec.value0.parseModuleData(filePathRel)(v)))(function (v1) {
                      var depsHere = Types.DependencyGraph(Data_Functor.map(Data_Functor.functorArray)(Types.Dependency.create(v1.modulePath))(v1.imports));
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_Eff.monadEff))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Eff.monadEff))(function ($36) {
                          return Data_Newtype.wrap(Control_Monad_Except_Trans.newtypeExceptT)(visit(langSpec)(baseDir)(langSpec.value0.modulePathToFilePath($36)));
                      })(v1.imports))(function (v2) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_Eff.monadEff))(Data_Semigroup.append(Types.semigroupDependencyGraph)(depsHere)(Data_Foldable.fold(Data_Foldable.foldableArray)(Types.monoidDependencyGraph)(v2)));
                      });
                  });
              }));
          };
      };
  };
  var runMain = function (v) {
      var langSpec = Specs.langSpecs(v.value0.language);
      return visit(langSpec)(v.value0.directory)(v.value0.main);
  };
  var run = function (task) {
      if (task instanceof Types.TaskHelp) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Types.ResultHelp.value);
      };
      if (task instanceof Types.TaskMain) {
          return Data_Functor.mapFlipped(Control_Monad_Eff.functorEff)(runMain(task.value0))(Types.ResultMain.create);
      };
      throw new Error("Failed pattern match at Main line 62, column 3 - line 64, column 53: " + [ task.constructor.name ]);
  };
  var printOutput = function (output1) {
      if (output1 instanceof Data_Either.Left) {
          return Control_Monad_Eff_Console.error(output1.value0);
      };
      if (output1 instanceof Data_Either.Right) {
          return Control_Monad_Eff_Console.log(output1.value0);
      };
      throw new Error("Failed pattern match at Main line 108, column 3 - line 110, column 25: " + [ output1.constructor.name ]);
  };
  var outputHelp = Data_Typelevel_Undefined["undefined"];
  var outputError = Data_Typelevel_Undefined["undefined"];
  var getTask = Data_Typelevel_Undefined["undefined"];
  var getDot = Data_Typelevel_Undefined["undefined"];
  var output = function (result) {
      if (result instanceof Types.ResultHelp) {
          return new Data_Either.Right(outputHelp);
      };
      if (result instanceof Types.ResultMain && result.value0 instanceof Data_Either.Right) {
          var v = getDot(result.value0.value0);
          return new Data_Either.Right(v);
      };
      if (result instanceof Types.ResultMain && result.value0 instanceof Data_Either.Left) {
          return Data_Either.Left.create(outputError(result.value0.value0));
      };
      throw new Error("Failed pattern match at Main line 91, column 3 - line 94, column 52: " + [ result.constructor.name ]);
  };
  var main = function __do() {
      var v = getTask();
      var v1 = run(v)();
      return printOutput(output(v1))();
  };
  exports["getTask"] = getTask;
  exports["readTextFileErr"] = readTextFileErr;
  exports["run"] = run;
  exports["runMain"] = runMain;
  exports["visit"] = visit;
  exports["output"] = output;
  exports["outputError"] = outputError;
  exports["outputHelp"] = outputHelp;
  exports["printOutput"] = printOutput;
  exports["getDot"] = getDot;
  exports["printPath'"] = printPath$prime;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();